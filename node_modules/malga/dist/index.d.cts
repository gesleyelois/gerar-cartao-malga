interface ApiPostOptions {
    idempotencyKey?: string;
}
type ApiPaginateSortTypes = 'ASC' | 'DESC';
declare enum ApiPaginateSort {
    ASC = "ASC",
    DESC = "DESC"
}
interface ApiPaginateParamsBase {
    page?: number;
    limit?: number;
    sort?: ApiPaginateSortTypes;
}
interface ApiPaginateResponse<T> {
    items: T[];
    meta: {
        totalItems: number;
        itemCount: number;
        itemsPerPage: number;
        totalPages: number;
        currentPage: number;
    };
}

type MalgaErrorType = 'api_error' | 'bad_request' | 'invalid_request_error' | 'card_declined';
type MalgaErrorDeclinedCode = 'card_not_supported' | 'expired_card' | 'fraud_confirmed' | 'fraud_suspect' | 'generic' | 'insufficient_funds' | 'invalid_amount' | 'invalid_cvv' | 'invalid_data' | 'invalid_installment' | 'invalid_merchant' | 'invalid_number' | 'invalid_pin' | 'issuer_not_available' | 'lost_card' | 'not_permitted' | 'pickup_card' | 'pin_try_exceeded' | 'restricted_card' | 'security_violation' | 'service_not_allowed' | 'stolen_card' | 'transaction_not_allowed' | 'try_again';
interface MalgaErrorResponse {
    error: {
        type: MalgaErrorType;
        code: number;
        message: string;
        details?: string | string[];
        declinedCode?: MalgaErrorDeclinedCode;
    };
}
interface MalgaConfigurations {
    apiKey: string;
    clientId: string;
    options?: {
        sandbox?: boolean;
        http?: {
            retries?: number;
            retryDelay?: number;
        };
    };
}

declare class Api {
    private readonly configurations;
    private static TEN_SECONDS_RETRY_DELAY;
    private readonly api;
    constructor(configurations: MalgaConfigurations);
    private getBaseUrl;
    private handleRetryDelay;
    private handleRetryCondition;
    private handlePaginateParams;
    private handleSuccess;
    private handleError;
    get(path: string): Promise<any>;
    post<Payload>(path: string, payload?: Payload, idempotencyKey?: string, publicKey?: string): Promise<any>;
    delete<Payload>(path: string, payload?: Payload): Promise<any>;
    patch<Payload>(path: string, payload: Payload): Promise<any>;
    put<Payload>(path: string, payload: Payload): Promise<any>;
    paginate<Params = ApiPaginateParamsBase>(path: string, params?: Params): Promise<any>;
}

type AuthScopeTypes = 'customers' | 'cards' | 'tokens' | 'charges' | 'webhooks' | 'sessions' | 'auth' | 'reports' | 'flows' | 'sellers';
type AuthScop = '*' | AuthScopeTypes[];
interface AuthCreatePublicKeyPayload {
    scope: AuthScop;
    expires: number;
}
interface AuthCreatePublicKeyResponse {
    publicKey: string;
    createdAt: string;
    clientId: string;
    expires: string;
    scope: AuthScop;
}
declare enum AuthScope {
    Customers = "customers",
    Cards = "cards",
    Tokens = "tokens",
    Charges = "charges",
    Webhooks = "webhooks",
    Sessions = "sessions",
    Auth = "auth",
    Reports = "reports",
    Flows = "flows",
    Sellers = "sellers"
}

declare class Auth {
    private readonly api;
    constructor(api: Api);
    /**
     * Create a publicKey
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/auth/create-public-key
     *
     * @param payload - Send the `scope` that determines access to endpoints and the `expires` in seconds for the key expiration time
     * @param options - API options like `idempotencyKey`
     * @returns Customer API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const { publicKey } = await malga.auth.createPublicKey({
     *   scope: ['tokens', 'cards'],
     *   expires: 600, // in seconds
     * })
     * ```
     */
    createPublicKey(payload: AuthCreatePublicKeyPayload, options?: ApiPostOptions): Promise<AuthCreatePublicKeyResponse>;
}

interface CustomerDocument {
    type: string;
    number: string;
    country?: string;
}
interface CustomerAddress {
    street: string;
    streetNumber: string;
    zipCode: string;
    country: string;
    state: string;
    city: string;
    district: string;
    complement?: string;
}
interface Customer {
    name: string;
    email: string;
    phoneNumber: string;
    document: CustomerDocument;
    address?: CustomerAddress;
}
interface CustomerResponse extends Customer {
    id: string;
    createdAt: string;
}

interface CustomerCreatePayload extends Customer {
}
interface CustomerCreateResponse extends CustomerResponse {
}
interface CustomerCreateOptions extends ApiPostOptions {
    force?: boolean;
}

type CustomerUpdatePayload = Omit<Customer, 'document' | 'email'>;
interface CustomerUpdateResponse {
    id: string;
    updatedAt: string;
    createdAt: string;
    idempotencyKey: string | null;
    requestId: string | null;
    clientId: string;
    cardId: string | null;
    name: string;
    email: string;
    phoneNumber: string;
    documentNumber: string;
    documentType: string;
    documentCountry: string | null;
    address: {
        country: string;
        id: string;
        updatedAt: string;
        createdAt: string;
        idempotencyKey: string | null;
        requestId: string | null;
        street: string;
        streetNumber: string;
        complement: string | null;
        zipCode: string;
        state: string;
        city: string;
        district: string;
        deletedAt: string | null;
    };
}

interface CustomerListParams extends ApiPaginateParamsBase {
    documentType?: string;
    documentNumber?: string;
}
type CustomerListResponse = ApiPaginateResponse<CustomerResponse>;

interface CustomerCardsResponse {
    id: string;
    status: 'failed' | 'active' | 'pending';
    createdAt: string;
    clientId: string;
    customerId: string;
    brand: 'Mastercard';
    cardHolderName: string;
    cvvChecked: boolean;
    fingerprint: string | null;
    first6digits: string;
    last4digits: string;
    expirationMonth: string;
    expirationYear: string;
}

interface CustomerLinkCardPayload {
    cardId: string;
}

interface CustomerFindResponse extends CustomerResponse {
}

declare class Customers {
    private readonly api;
    constructor(api: Api);
    /**
     * Create a customer
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/customers/create-customer
     *
     * @param payload - Customer object
     * @param options - API options like `idempotencyKey`
     * @returns Customer API response
     *
     * @example
     * Here is an example of how to create a customer
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const customer = await malga.customers.create({
     *   name: 'Homer Simpson',
     *   email: 'homer@simpsons.com',
     *   phoneNumber: '99999999999',
     *   document: {
     *     type: 'cpf',
     *     number: '99999999999',
     *     country: 'BR',
     *   },
     *   address: {
     *     street: 'Evergreen Terrace',
     *     streetNumber: '742',
     *     zipCode: '62629',
     *     country: 'US',
     *     state: 'Louisiana',
     *     city: 'Springfield',
     *     district: 'Suburb',
     *     complement: 'Residence',
     *   },
     * })
     * ```
     *
     * * @example
     * Here is an example of how to create a customer while removing email and document duplication checks
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const customer = await malga.customers.create({
     *   name: 'Homer Simpson',
     *   email: 'homer@simpsons.com',
     *   phoneNumber: '99999999999',
     *   document: {
     *     type: 'cpf',
     *     number: '99999999999',
     *     country: 'BR',
     *   },
     *   address: {
     *     street: 'Evergreen Terrace',
     *     streetNumber: '742',
     *     zipCode: '62629',
     *     country: 'US',
     *     state: 'Louisiana',
     *     city: 'Springfield',
     *     district: 'Suburb',
     *     complement: 'Residence',
     *   },
     * }, { force: true })
     * ```
     */
    create(payload: CustomerCreatePayload, options?: CustomerCreateOptions): Promise<CustomerCreateResponse>;
    /**
     * Find customer details
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/customers/find-customer
     *
     * @param id - Customer ID
     * @returns Customer API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const customer = await malga.customers.find('e917fc6d-c640-47a1-83eb-aa820dbd92fe')
     * ```
     */
    find(id: string): Promise<CustomerFindResponse>;
    /**
     * List the customers
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/customers/list-customers
     *
     * @param params - Filter params
     * @returns Customer API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const customers = await malga.customers.list({ page: 1, limit: 15 })
     * ```
     */
    list(params?: CustomerListParams): Promise<CustomerListResponse>;
    /**
     * Update the customer
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/customers/update-customer
     *
     * @param id - Customer ID
     * @param payload - Updated customer object
     * @returns Customer API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const customer = await malga.customers.update(
     *  '575f9a3c-6e40-4077-852e-c6781dc3c7c7',
     *  { name: 'Bart Simpson', phoneNumber: '99999999998' }
     * )
     * ```
     */
    update(id: string, payload: CustomerUpdatePayload): Promise<CustomerUpdateResponse>;
    /**
     * Remove the customer
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/customers/remove-customer
     *
     * @param id - Customer ID
     * @returns void
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * await malga.customers.remove('575f9a3c-6e40-4077-852e-c6781dc3c7c7')
     * ```
     */
    remove(id: string): Promise<void>;
    /**
     * List customer cards
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/customers/find-customer
     *
     * @param id - Customer ID
     * @returns void
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const customerCards = await malga.customers.cards('575f9a3c-6e40-4077-852e-c6781dc3c7c7')
     * ```
     */
    cards(id: string): Promise<CustomerCardsResponse[]>;
    /**
     * Link customer to card
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/customers/link-card-customer
     *
     * @param id - Customer ID
     * @param payload - Card informations
     * @returns void
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * await malga.customers.linkCard('575f9a3c-6e40-4077-852e-c6781dc3c7c7', {
     *   cardId: '13c2a9c0-9936-4024-b8a8-1952dbdc5460'
     * })
     * ```
     */
    linkCard(id: string, payload: CustomerLinkCardPayload, options?: ApiPostOptions): Promise<void>;
}

type SellerStatus = 'active' | 'pending' | 'inactive';
interface SellerProvider {
    providerType: string;
    externalId: string;
    externalStatus: string;
    externalStatusReason: string;
    status: string;
}
interface SellerOwner {
    name: string;
    email: string;
    phoneNumber: string;
    birthdate: string;
    document: {
        type: string;
        number: string;
        country?: string;
    };
    address: {
        street: string;
        streetNumber: string;
        zipCode: string;
        country: string;
        state: string;
        city: string;
        district: string;
        complement?: string;
    };
}
interface SellerBusiness extends Omit<SellerOwner, 'birthdate'> {
    website?: string;
    facebook?: string;
    twitter?: string;
    description: string;
    openingDate: string;
}
interface Seller {
    merchantId: string;
    owner?: SellerOwner;
    business?: SellerBusiness;
    mcc: number;
    bankAccount: {
        holderName: string;
        holderType?: 'individual' | 'company';
        holderDocument: string;
        bank: string;
        branchNumber: string;
        branchCheckDigit?: string;
        accountNumber: string;
        accountCheckDigit: string;
        type: 'conta_corrente' | 'conta_poupanca' | 'conta_corrente_conjunta' | 'conta_poupanca_conjunta';
    };
    transferPolicy: {
        transferDay: number;
        transferEnabled: boolean;
        transferInterval: 'daily' | 'weekly' | 'monthly';
        automaticAnticipationEnabled?: boolean;
        anticipatableVolumePercentage?: string;
        automaticAnticipationType?: string;
        automaticAnticipationDays?: string;
        automaticAnticipation1025Delay?: string;
    };
    metadata?: Record<string, string>[];
}
interface SellerResponse extends Seller {
    id: string;
    clientId: string;
    status: SellerStatus;
    providers: SellerProvider[];
}

interface SellerCreatePayload extends Seller {
}
interface SellerCreateResponse extends SellerResponse {
}

interface SellerFindResponse extends SellerResponse {
}

interface SellerListParams extends ApiPaginateParamsBase {
    email?: string;
    status?: SellerStatus[];
}
type SellerListResponse = ApiPaginateResponse<SellerResponse>;

interface SellerUpdatePayload extends Seller {
}
interface SellerUpdateResponse extends SellerResponse {
}

interface SellerRemovePayload {
    merchantId: string;
}

declare class Sellers {
    private readonly api;
    constructor(api: Api);
    /**
     * Create a seller
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sellers/create-seller
     *
     * @param payload - Seller object
     * @param options - API options like `idempotencyKey`
     * @returns Seller API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const seller = await malga.sellers.create({
     *   merchantId: 'aa2ec134-6164-4b5b-a7e2-85daefec318d',
     *   mcc: 1,
     *   owner: {
     *     name: 'Homer Simpson',
     *     email: 'homer@simpsons.com',
     *     phoneNumber: '99999999999',
     *     birthdate: '1989-12-17',
     *     document: {
     *       type: 'cpf',
     *       number: '99999999999',
     *       country: 'BR',
     *     },
     *     address: {
     *      street: 'Evergreen Terrace',
     *      streetNumber: '742',
     *      zipCode: '62629',
     *      country: 'US',
     *      state: 'Louisiana',
     *      city: 'Springfield',
     *      district: 'Suburb',
     *      complement: 'Residence',
     *     },
     *   },
     *   bankAccount: {
     *     holderName: 'Homer Simpson',
     *     holderDocument: '99999999999',
     *     bank: '077',
     *     branchNumber: '492',
     *     branchCheckDigit: '1',
     *     accountNumber: '4929',
     *     accountCheckDigit: '22',
     *     type: 'conta_corrente',
     *   },
     *   transferPolicy: {
     *     transferDay: 5,
     *     transferEnabled: true,
     *     transferInterval: 'weekly',
     *     automaticAnticipationEnabled: false,
     *   },
     *   metadata: [{
     *     key: '768093',
     *     value: 'Additional information',
     *   }],
     * })
     * ```
     */
    create(payload: SellerCreatePayload, options?: ApiPostOptions): Promise<SellerCreateResponse>;
    /**
     * Find seller details
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sellers/find-seller
     *
     * @param id - Seller ID
     * @returns Seller API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const seller = await malga.sellers.find('e917fc6d-c640-47a1-83eb-aa820dbd92fe')
     * ```
     */
    find(id: string): Promise<SellerFindResponse>;
    /**
     * List the sellers
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sellers/list-sellers
     *
     * @param params - Filter params
     * @returns Seller API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const sellers = await malga.sellers.list({ page: 1, limit: 15 })
     * ```
     */
    list(params?: SellerListParams): Promise<SellerListResponse>;
    /**
     * Update the seller
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sellers/update-seller
     *
     * @param id - Seller ID
     * @param payload - Updated seller object
     * @returns Seller API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const seller = await malga.sellers.update('575f9a3c-6e40-4077-852e-c6781dc3c7c7', {
     *   merchantId: 'aa2ec134-6164-4b5b-a7e2-85daefec318d',
     *   mcc: 1,
     *   owner: {
     *     name: 'Homer Simpson',
     *     email: 'homer@simpsons.com',
     *     phoneNumber: '99999999999',
     *     birthdate: '1989-12-17',
     *     document: {
     *       type: 'cpf',
     *       number: '99999999999',
     *       country: 'BR',
     *     },
     *     address: {
     *      street: 'Evergreen Terrace',
     *      streetNumber: '742',
     *      zipCode: '62629',
     *      country: 'US',
     *      state: 'Louisiana',
     *      city: 'Springfield',
     *      district: 'Suburb',
     *      complement: 'Residence',
     *     },
     *   },
     *   bankAccount: {
     *     holderName: 'Homer Simpson',
     *     holderDocument: '99999999999',
     *     bank: '077',
     *     branchNumber: '492',
     *     branchCheckDigit: '1',
     *     accountNumber: '4929',
     *     accountCheckDigit: '22',
     *     type: 'conta_corrente',
     *   },
     *   transferPolicy: {
     *     transferDay: 5,
     *     transferEnabled: true,
     *     transferInterval: 'weekly',
     *     automaticAnticipationEnabled: false,
     *   },
     *   metadata: [{
     *     key: '768093',
     *     value: 'Additional information',
     *   }],
     * })
     * ```
     */
    update(id: string, payload: SellerUpdatePayload): Promise<SellerUpdateResponse>;
    /**
     * Remove the seller
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sellers/remove-seller
     *
     * @param id - Seller ID
     * @returns void
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * await malga.sellers.remove('575f9a3c-6e40-4077-852e-c6781dc3c7c7', {
     *   merchantId: 'aa2ec134-6164-4b5b-a7e2-85daefec318d',
     * })
     * ```
     */
    remove(id: string, payload: SellerRemovePayload): Promise<void>;
}

interface SessionItem {
    name: string;
    unitPrice: number;
    quantity: number;
    description?: string;
    tangible?: boolean;
}
interface SessionPix {
    paymentType: 'pix';
    expiresIn: number;
}
interface SessionBoleto {
    paymentType: 'boleto';
    expiresDate: string;
    instructions?: string;
    interest?: {
        days: number;
        amount?: number;
        percentage?: number;
    };
    fine?: {
        days: number;
        amount?: number;
        percentage?: number;
    };
}
interface SessionCredit {
    paymentType: 'credit';
    installments: number;
}
interface SessionDrip {
    paymentType: 'drip';
    successRedirectUrl?: string;
    cancelRedirectUrl?: string;
}
interface SessionNuPay {
    paymentType: 'nupay';
    orderUrl?: string;
    returnUrl?: string;
    cancelUrl?: string;
    taxValue?: number;
    delayToAutoCancel?: number;
}
interface Session {
    merchantId: string;
    amount: number;
    dueDate: string;
    name: string;
    paymentMethods: (SessionCredit | SessionPix | SessionBoleto | SessionDrip | SessionNuPay)[];
    items: SessionItem[];
    description?: string;
    statementDescriptor?: string;
    createLink?: boolean;
    orderId?: string;
    currency?: string;
    isActive?: boolean;
    capture?: boolean;
}
interface SessionResponse extends Omit<Session, 'createLink'> {
    createdAt: string;
    updatedAt: string;
    id: string;
    publicKey: string;
    paymentLink: string;
    status: SessionStatus;
}
type SessionStatus = 'created' | 'paid' | 'canceled' | 'voided';

interface SessionCreatePayload extends Session {
}
interface SessionCreateResponse extends SessionResponse {
}

interface SessionFindResponse extends SessionResponse {
}

interface SessionListParams extends Omit<ApiPaginateParamsBase, 'sort'> {
    startDate?: string;
    endDate?: string;
    isActive?: boolean[];
    status?: SessionStatus[];
}
type SessionListResponse = ApiPaginateResponse<SessionResponse>;

interface SessionCancelResponse {
    id: string;
    status: SessionStatus;
}

interface SessionToggleActiveStatusResponse {
    id: string;
    isActive: boolean;
}

declare class Sessions {
    private readonly api;
    constructor(api: Api);
    /**
     * Create a session
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sessions/create-session
     *
     * @param payload - Session object
     * @param options - API options like `idempotencyKey`
     * @returns Session API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const session = await malga.sessions.create({
     *   name: 'First Session',
     *   amount: 100,
     *   merchantId: 'aa2ec134-6164-4b5b-a7e2-85daefec318d',
     *   dueDate: '2023-12-27T03:00:00.000Z',
     *   paymentMethods: [
     *     { paymentType: 'credit', installments: 1 },
     *     { paymentType: 'pix', expiresIn: 60 },
     *   ],
     *   items: [
     *     { name: 'Product 1', quantity: 1, unitPrice: 100 },
     *   ],
     * })
     * ```
     */
    create(payload: SessionCreatePayload, options?: ApiPostOptions): Promise<SessionCreateResponse>;
    /**
     * Find session details
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sessions/find-session
     *
     * @param id - Session ID
     * @returns Session API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const session = await malga.sessions.find('e917fc6d-c640-47a1-83eb-aa820dbd92fe')
     * ```
     */
    find(id: string): Promise<SessionFindResponse>;
    /**
     * List the sessions
     *
     * @param params - Filter params
     * @returns Session API response
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sessions/list-sessions
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const sessions = await malga.sessions.list({
     *   page: 1,
     *   limit: 15,
     *   startDate: '2023-09-17T03:00:00.000Z',
     *   endDate: '2023-09-23T02:59:59.999Z',
     * })
     * ```
     */
    list(params?: SessionListParams): Promise<SessionListResponse>;
    /**
     * Cancel the session
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sessions/cancel-session
     *
     * @param id - Session ID
     * @returns Session API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * await malga.sessions.cancel('575f9a3c-6e40-4077-852e-c6781dc3c7c7')
     * ```
     */
    cancel(id: string): Promise<SessionCancelResponse>;
    /**
     * Enable the session
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sessions/enable-session
     *
     * @param id - Session ID
     * @returns Session API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * await malga.sessions.enable('575f9a3c-6e40-4077-852e-c6781dc3c7c7')
     * ```
     */
    enable(id: string): Promise<SessionToggleActiveStatusResponse>;
    /**
     * Disable the session
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sessions/disable-session
     *
     * @param id - Session ID
     * @returns Session API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * await malga.sessions.disable('575f9a3c-6e40-4077-852e-c6781dc3c7c7')
     * ```
     */
    disable(id: string): Promise<SessionToggleActiveStatusResponse>;
}

interface WebhookVerifyParams {
    publicKey: string;
    payload: string;
    signatureTime: number;
    signature: string;
}

declare class Webhooks {
    constructor();
    /**
     * Verify the event signature
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/webhooks/verify-event-webhook
     *
     * @param params - Object with webhook data for signature verification
     * @returns {bool}
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const verified = malga.webhooks.verify({
     *   payload: '{"event":"ping","payload":{"object":{}}}',
     *   publicKey: '-----BEGIN PUBLIC KEY-----\nMCwBQYDK2VwAyEASdad=\n-----END PUBLIC KEY-----\n',
     *   signature: '5b20c43cfd55f0c1884196'
     *   signatureTime: 1661795163719,
     * })
     * ```
     */
    verify(params: WebhookVerifyParams): boolean;
}

type ChargeStatusTypes = 'pending' | 'pre_authorized' | 'authorized' | 'failed' | 'canceled' | 'voided' | 'charged_back' | 'capture_pending' | 'refund_pending' | 'created';
type ChargePaymentType = 'pix' | 'credit' | 'boleto' | 'voucher' | 'nupay' | 'drip';
type ChargeProvider = 'PAGARME' | 'PAGSEGURO' | 'PAGSEGURO_PIX' | 'BS2' | 'BS2_BOLETO' | 'BB' | 'CIELO' | 'GERENCIA_NET' | 'ZOOP' | 'STRIPE' | 'REDE' | 'MERCADO_PAGO' | 'CLEARSALE' | 'BRAINTREE' | 'NUPAY' | 'ADYEN' | 'KLAP' | 'GETNET' | 'BRASPAG' | 'SANDBOX' | 'SANDBOX_ANTIFRAUD' | 'WORLDPAY' | 'VR' | 'DRIP' | 'PAGARME_V5';
interface SplitRule {
    sellerId: string;
    percentage?: number;
    amount?: number;
    processingFee: boolean;
    liable: boolean;
    fares?: {
        mdr: number;
        fee: number;
    };
}
interface ChargePaymentMethodCard$1 {
    paymentType: 'credit';
    installments?: number;
}
interface ChargePaymentMethodPix$1 {
    paymentType: 'pix';
    expiresIn: number;
    qrCodeData: string;
    qrCodeImageUrl: string;
}
interface ChargePaymentMethodBoleto$1 {
    paymentType: 'boleto';
    expiresDate: string;
    barcodeData: string;
    barcodeImageUrl: string;
}
interface ChargePaymentMethodNupay {
    paymentType: 'nupay';
    delayToAutoCancel: number;
    orderUrl?: string;
    taxValue?: number;
}
interface ChargePaymentMethodVoucher$1 {
    paymentType: 'voucher';
}
interface ChargePaymentMethodDrip$1 {
    paymentType: 'drip';
    paymentUrl: string;
}
type ChargePaymentMethod = ChargePaymentMethodPix$1 | ChargePaymentMethodBoleto$1 | ChargePaymentMethodCard$1 | ChargePaymentMethodNupay | ChargePaymentMethodVoucher$1 | ChargePaymentMethodDrip$1;
interface ChargePaymentSourceCard {
    sourceType: 'card';
    cardId: string;
    cardCvv?: string;
}
interface ChargePaymentSourceCardOneShot {
    sourceType: 'card';
    card: {
        cardHolderName: string;
        cardNumber: string;
        cardCvv: string;
        cardExpirationDate: string;
    };
}
interface ChargePaymentSourceToken {
    sourceType: 'token';
    tokenId: string;
}
interface ChargePaymentSourceCustomer {
    sourceType: 'customer';
    customerId: string;
}
interface ChargePaymentSourceCustomerOneShot {
    sourceType: 'customer';
    customer?: Customer;
}
type ChargePaymentSource = ChargePaymentSourceCard | ChargePaymentSourceCardOneShot | ChargePaymentSourceToken | ChargePaymentSourceCustomer | ChargePaymentSourceCustomerOneShot;
type ChargeRequestStatus = 'running' | 'failed' | 'success' | 'timeout' | 'internal_error' | 'processing';
type ChargeRequestType = 'pending' | 'authorization' | 'pre_authorization' | 'void' | 'capture' | 'probe' | 'charge_back' | 'zero_dollar' | 'capture_pending' | 'refund_pending' | 'anti_fraud' | 'dispute' | 'dispute_closed' | 'anti_fraud_feeding';
interface ChargeProviderError {
    message: string;
    declinedCode: string;
    retryable: boolean;
    networkDeniedReason: string;
    networkDeniedMessage: string;
}
interface ChargeProviderAuthorization {
    networkAuthorizationCode: string;
    networkResponseCode: string;
}
interface ChargeFraudAnalysis {
    status: string;
    score: number;
}
interface ChargeTransactionRequest {
    id: string;
    createdAt: string;
    updatedAt: string;
    idempotencyKey: string;
    providerId: string;
    providerType: ChargeProvider | null;
    transactionId: string | null;
    amount: number;
    authorizationCode: string;
    authorizationNsu: string;
    requestStatus: ChargeRequestStatus;
    requestType: ChargeRequestType;
    responseTs: string;
    providerError?: ChargeProviderError;
    providerAuthorization?: ChargeProviderAuthorization;
    fraudAnalysis?: ChargeFraudAnalysis;
}
interface AppInfoBase {
    name: string;
    version: string;
}
interface AppInfoPlatform extends AppInfoBase {
    integrator: string;
}
interface AppInfo {
    platform?: AppInfoPlatform;
    device?: AppInfoBase;
    system?: AppInfoBase;
}
interface Charge {
    id: string;
    clientId: string;
    merchantId: string;
    customerId?: string;
    providerReferenceKey: string | null;
    description: string | null;
    orderId: string | null;
    createdAt: string;
    amount: number;
    originalAmount: number;
    currency: string;
    statementDescriptor: string | null;
    capture: boolean;
    status: ChargeStatusTypes;
    paymentMethod: ChargePaymentMethod;
    sourceType: ChargePaymentSource;
    transactionRequests: ChargeTransactionRequest[];
    splitRules?: SplitRule[];
    appInfo: AppInfo | null;
}
declare enum ChargeStatus {
    Pending = "pending",
    PreAuthorized = "pre_authorized",
    Authorized = "authorized",
    Failed = "failed",
    Canceled = "canceled",
    Voided = "voided",
    ChargedBack = "charged_back",
    CapturePending = "capture_pending",
    RefundPending = "refund_pending",
    Created = "created"
}

interface SandboxChangeChargeStatusPayload {
    status: ChargeStatusTypes;
}
interface SandboxChangeChargeStatusResponse extends Charge {
}

interface SandboxChangeAntifraudStatusPayload {
    status: 'approved' | 'reproved' | 'failed';
}
interface SandboxChangeAntifraudStatusResponse extends Charge {
}

type GenerateCardBrand = 'Mastercard' | 'Visa' | 'Amex' | 'HiperCard' | 'DinersClub';
type GenerateCardStatus = 'authorized' | 'unauthorized' | 'blocked_card' | 'canceled_card' | 'expired_card' | 'invalid_cvv' | 'timeout' | 'authorized_or_timeout';
interface SandboxGenerateCardParams {
    brand: GenerateCardBrand;
    status: GenerateCardStatus;
}
interface SandboxGenerateCardResponse {
    number: string;
    cvv: string;
    expirationDate: string;
}

declare class Sandbox {
    private readonly api;
    private readonly isSandbox;
    constructor(api: Api, isSandbox: boolean);
    /**
     * Change the charge status in the sandbox
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sandbox/change-charge-status
     *
     * @param id - Charge ID
     * @param payload - Object with expected status
     * @returns Charge API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     *   options: { sandbox: true }
     * })
     *
     * const charge = await malga.sandbox.changeChargeStatus(
     *  'b6a4bf0c-1540-4403-aa3b-f5b327cc4f6f',
     *  {
     *   status: 'voided'
     *  }
     * )
     * ```
     */
    changeChargeStatus(id: string, payload: SandboxChangeChargeStatusPayload): Promise<SandboxChangeChargeStatusResponse>;
    /**
     * Change the antifraud status in the sandbox
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sandbox/change-antifraud-status
     *
     * @param id - Charge ID
     * @param payload - Object with expected status
     * @returns Charge API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     *   options: { sandbox: true }
     * })
     *
     * const charge = await malga.sandbox.changeAntifraudStatus(
     *  'b6a4bf0c-1540-4403-aa3b-f5b327cc4f6f',
     *  {
     *   status: 'reproved'
     *  }
     * )
     * ```
     */
    changeAntifraudStatus(id: string, payload: SandboxChangeAntifraudStatusPayload): Promise<SandboxChangeAntifraudStatusResponse>;
    /**
     * Card generator for use in a sandbox environment
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/sandbox/generate-card
     *
     * @param params - Object with the card brand and the expected status
     * @returns card with `number`, `cvv` and `expirationDate`
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     *   options: { sandbox: true }
     * })
     *
     * const card = malga.sandbox.generateCard({
     *   brand: 'Mastercard',
     *   status: 'expired_card'
     * })
     * ```
     */
    generateCard(params: SandboxGenerateCardParams): SandboxGenerateCardResponse;
}

type CardStatus = 'failed' | 'active' | 'pending';
interface CardResponse {
    id: string;
    status: CardStatus;
    createdAt: string;
    clientId: string;
    customerId: string | null;
    brand: string;
    cardHolderName: string;
    cvvChecked: boolean;
    fingerprint: string;
    first6digits: string;
    last4digits: string;
    expirationMonth: string;
    expirationYear: string;
    statusReason?: string;
    deletedAt?: string;
    deletedReason?: string;
}

interface CardCreatePayload {
    tokenId: string;
    zeroDollar?: {
        merchantId?: string;
        cvvCheck?: boolean;
    };
}
type CardCreateResponse = Omit<CardResponse, 'deletedAt' | 'deletedReason'>;

interface CardTokenizationPayload {
    holderName?: string;
    number?: string;
    cvv: string;
    expirationDate?: string;
}
interface CardTokenizationResponse {
    tokenId: string;
}

type CardListResponse = ApiPaginateResponse<Omit<CardResponse, 'deletedAt' | 'deletedReason' | 'statusReason'>>;
type CardListParams = Omit<ApiPaginateParamsBase, 'sort'>;

interface CardFindResponse extends CardResponse {
}

declare class Cards {
    private readonly api;
    constructor(api: Api);
    /**
     * Create a card
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/cards/create-card
     *
     * @param payload - Card object
     * @param options - API options like `idempotencyKey`
     * @returns Card API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const card = await malga.cards.create({
     *   tokenId: '931e1028-68b2-47b8-a534-3a59d5b45361',
     *   zeroDollar: {
     *     merchantId: 'aa2ec134-6164-4b5b-a7e2-85daefec318d',
     *     cvvCheck: true
     *   }
     * })
     * ```
     */
    create(payload: CardCreatePayload, options?: ApiPostOptions): Promise<CardCreateResponse>;
    /**
     * Find card details
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/cards/find-card
     *
     * @param id - Card ID
     * @returns Card API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const card = await malga.cards.find('e917fc6d-c640-47a1-83eb-aa820dbd92fe')
     * ```
     */
    find(id: string): Promise<CardFindResponse>;
    /**
     * List the cards
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/cards/list-cards
     *
     * @param params - Filter params
     * @returns Card API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const cards = await malga.cards.list({
     *   page: 1,
     *   limit: 15,
     * })
     * ```
     */
    list(params?: CardListParams): Promise<CardListResponse>;
    /**
     * Create a tokenized card or CVV
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/cards/tokenization-card
     *
     * @param payload - Token object
     * @param options - API options like `idempotencyKey`
     * @returns Token API response
     *
     * @example
     * Here is an example of how to tokenize a card:
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const tokenId = await malga.cards.tokenization({
     *   holderName: 'Homer Simpson',
     *   number: '5402502027127339'
     *   cvv: '391',
     *   expirationDate: '01/2025'
     * })
     * ```
     *
     * @example
     * Here is an example of how to tokenize a CVV:
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const tokenCvv = await malga.cards.tokenization({
     *   cvv: '170',
     * })
     * ```
     */
    tokenization(payload: CardTokenizationPayload, options?: ApiPostOptions): Promise<CardTokenizationResponse>;
}

interface ChargePaymentMethodItem {
    id: string;
    title: string;
    unitPrice: number;
    quantity: number;
}
interface ChargePaymentMethodCard {
    linkCardToCustomer?: boolean;
    tokenCvv?: string;
    tokenId?: string;
    cardCvv?: string;
    cardId?: string;
    card?: {
        holderName: string;
        number: string;
        cvv: string;
        expirationDate: string;
        zeroDollar?: {
            merchantId?: string;
            cvvCheck?: boolean;
        };
    };
}
interface ChargePaymentMethodCredit extends ChargePaymentMethodCard {
    type: 'credit';
    installments: number;
}
interface ChargePaymentMethodVoucher extends ChargePaymentMethodCard {
    type: 'voucher';
    items?: ChargePaymentMethodItem[];
}
interface ChargePaymentMethodPix {
    type: 'pix';
    expiresIn: number;
    additionalInfo?: {
        name: string;
        value: string;
    }[];
    items?: ChargePaymentMethodItem[];
}
interface ChargePaymentMethodBoleto {
    type: 'boleto';
    expiresDate?: string;
    instructions?: string;
    interest?: {
        days: number;
        percentage?: number;
        amount?: number;
    };
    fine?: {
        days: number;
        percentage?: number;
        amount?: number;
    };
}
interface ChargePaymentMethodDrip {
    type: 'drip';
    successRedirectUrl?: string;
    cancelRedirectUrl?: string;
    browser?: {
        ipAddress?: string;
        browserFingerprint?: string;
    };
    items?: ChargePaymentMethodItem[];
}
interface ChargePaymentMethodNuPay {
    type: 'nupay';
    orderUrl?: string;
    returnUrl?: string;
    cancelUrl?: string;
    taxValue?: number;
    delayToAutoCancel?: number;
    items: ChargeCreateFraudAnalysisItem[];
}
interface ChargeCreateFraudAnalysisAddress {
    street: string;
    number: string;
    zipCode: string;
    country: string;
    state: string;
    city: string;
    district: string;
    complement?: string;
}
interface ChargeCreateFraudAnalysisItem {
    name: string;
    quantity: number;
    sku: string;
    unitPrice: number;
    risk: 'Low' | 'High';
    description?: string;
    categoryId?: string;
    locality?: string;
    date?: string;
    type?: number;
    genre?: string;
    tickets?: {
        quantityTicketSale?: number;
        quantityEventHouse?: number;
        convenienceFeeValue?: number;
        quantityFull?: number;
        quantityHalf?: number;
        batch?: number;
    };
    location?: ChargeCreateFraudAnalysisAddress;
}
interface ChargeCreateFraudAnalysis {
    sla?: number;
    customer?: {
        name?: string;
        email?: string;
        phone?: string;
        birthdate?: string;
        identity?: string;
        identityType?: string;
        registrationDate?: string;
        deliveryAddress?: ChargeCreateFraudAnalysisAddress;
        billingAddress?: ChargeCreateFraudAnalysisAddress;
        browser?: {
            browserFingerprint: string;
            cookiesAccepted: boolean;
            email: string;
            hostName: string;
            ipAddress: string;
            type: string;
        };
    };
    cart?: {
        items: ChargeCreateFraudAnalysisItem[];
    };
    device?: {
        os?: {
            type?: string;
            version?: string;
        };
        model?: string;
        ramCapacity?: number;
        diskCapacity?: number;
        freeDiskSpace?: number;
        resolution?: number;
        vendors?: Record<string, any>[];
        vendorAttributes?: {
            flash?: boolean;
            phoneCalls?: boolean;
            sendSms?: boolean;
            videoCamera?: boolean;
            cpuCount?: boolean;
            simulator?: boolean;
            language?: string;
            idiom?: string;
            platform?: string;
            name?: string;
            family?: string;
            retinaDisplay?: boolean;
            camera?: boolean;
            model?: string;
            frontCamera?: boolean;
        };
    };
}
interface ChargeCreateThreeDSecureAddress {
    street: string;
    streetNumber: string;
    zipCode: string;
    country: string;
    state: string;
    city: string;
}
interface ChargeCreateThreeDSecure {
    redirectURL: string;
    requestorURL: string;
    browser: {
        acceptHeader: string;
        colorDepth: number;
        javaEnabled: boolean;
        javaScriptEnabled: boolean;
        language: string;
        screenHeight: number;
        screenWidth: number;
        timeZoneOffset: string;
        userAgent: string;
        ip: string;
    };
    billingAddress?: ChargeCreateThreeDSecureAddress;
    shippingAddress?: ChargeCreateThreeDSecureAddress;
    cardHolder?: {
        email: string;
        mobilePhone?: string;
    };
}
type ChargeCreatePaymentMethod = ChargePaymentMethodCredit | ChargePaymentMethodPix | ChargePaymentMethodBoleto | ChargePaymentMethodDrip | ChargePaymentMethodNuPay | ChargePaymentMethodVoucher;
interface ChargeCreatePaymentFlow {
    metadata: Record<string, any>;
}
interface ChargeCommonCreatePayload {
    paymentMethod: ChargeCreatePaymentMethod;
    fraudAnalysis?: ChargeCreateFraudAnalysis;
    paymentFlow?: ChargeCreatePaymentFlow;
    threeDSecure?: ChargeCreateThreeDSecure;
    customer?: Customer;
    customerId?: string;
}
interface ChargeSessionCreatePayload extends ChargeCommonCreatePayload {
    sessionId: string;
    publicKey: string;
    appInfo?: Omit<AppInfo, 'platform'>;
}
interface ChargeDefaultCreatePayload extends ChargeCommonCreatePayload {
    amount: number;
    providerReferenceKey?: string;
    orderId?: string;
    currency?: string;
    capture?: boolean;
    merchantId: string;
    description?: string;
    statementDescriptor?: string;
    splitRules?: SplitRule[];
    appInfo?: Omit<AppInfo, 'platform'>;
}
type ChargeCreatePayload = ChargeDefaultCreatePayload | ChargeSessionCreatePayload;
interface ChargeCreateResponse extends Charge {
}

interface ChargeFindResponse extends Charge {
}

interface ChargeListParams extends ApiPaginateParamsBase {
    startDate?: string;
    endDate?: string;
    merchantId?: string;
    amount?: number;
    status?: ChargeStatusTypes[];
    paymentMethod?: ChargePaymentType[];
    provider?: ChargeProvider[];
    orderId?: string;
    hasSplit?: boolean;
    sessionId?: string;
}
type ChargeListResponse = ApiPaginateResponse<Charge>;

interface ChargeCapturePayload {
    amount: number;
}
interface ChargeCaptureResponse extends Charge {
}

interface ChargeRefundPayload {
    amount: number;
    delayToCompose?: number;
}
interface ChargeRefundResponse extends Charge {
}

declare class Charges {
    private readonly api;
    private readonly cards;
    private readonly customers;
    constructor(api: Api, cards: Cards, customers: Customers);
    /**
     * Create a charge
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/charges/create-charge-credit
     *
     * @param payload - Charge object
     * @param options - API options like `idempotencyKey`
     * @returns Charge API response
     *
     * @example
     * Here is an example of how to create a charge
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const charge = await malga.charges.create({
     *   merchantId: 'MERCHANT_ID',
     *   amount: 100,
     *   customer: {
     *     name: 'Homer Simpson',
     *     email: 'homer@simpsons.com',
     *     phoneNumber: '99999999999',
     *     document: {
     *       type: 'cpf',
     *       number: '99999999999',
     *       country: 'BR',
     *     },
     *     address: {
     *       street: 'Evergreen Terrace',
     *       streetNumber: '742',
     *       zipCode: '62629',
     *       country: 'US',
     *       state: 'Louisiana',
     *       city: 'Springfield',
     *       district: 'Suburb',
     *       complement: 'Residence'
     *     }
     *   },
     *   paymentMethod: {
     *     type: 'credit',
     *     card: {
     *       holderName: 'Homer Simpson',
     *       number: '5402502027127339'
     *       cvv: '391',
     *       expirationDate: '01/2025'
     *     }
     *   }
     * })
     * ```
     *
     * @example
     * Here is an example of how to create a charge with session
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const charge = await malga.charges.create({
     *   sessionId: 'SESSION_ID',
     *   publicKey: 'PUBLIC_KEY'
     *   customerId: 'CUSTOMER_ID',
     *   paymentMethod: {
     *     type: 'credit',
     *     card: {
     *       holderName: 'Homer Simpson',
     *       number: '5402502027127339'
     *       cvv: '391',
     *       expirationDate: '01/2025'
     *     }
     *   }
     * })
     * ```
     */
    create(payload: ChargeCreatePayload, options?: ApiPostOptions): Promise<ChargeCreateResponse>;
    /**
     * Find charge details
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/charges/find-charge
     *
     * @param id - Charge ID
     * @returns Charge API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const charge = await malga.charges.find('e917fc6d-c640-47a1-83eb-aa820dbd92fe')
     * ```
     */
    find(id: string): Promise<ChargeFindResponse>;
    /**
     * List the charges
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/charges/list-charges
     *
     * @param params - Filter params
     * @returns Charge API response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * const charges = await malga.charges.list({
     *   page: 1,
     *   limit: 15,
     *   sort: 'DESC'
     *   startDate: '2023-12-26T03:00:00.000Z',
     *   endDate: '2023-12-27T03:00:00.000Z',
     *   merchantId: '8fdff2ab-2bc4-436c-b9c4-8354bf20a62f',
     *   amount: 100,
     *   status: ['authorized'],
     *   paymentMethod: ['credit'],
     *   provider: ['PAGARME'],
     *   orderId: '41ee1393-05a8-46cb-9746-20d7ac58aa5f',
     *   hasSplit: false,
     *   sessionId: '6d0d866a-d28a-4f3d-8690-9d7ca89ebddb'
     * })
     * ```
     */
    list(params?: ChargeListParams): Promise<ChargeListResponse>;
    /**
     * Capture pre-authorized charge
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/charges/capture-charge
     *
     * @param id - Charge ID
     * @param payload - object with `amount` value
     * @param options - API options like `idempotencyKey`
     * @returns Charge API Response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * await malga.charges.capture('575f9a3c-6e40-4077-852e-c6781dc3c7c7', {
     *   amount: 100
     * })
     * ```
     */
    capture(id: string, payload: ChargeCapturePayload, options?: ApiPostOptions): Promise<ChargeCaptureResponse>;
    /**
     * Refund authorized charge
     *
     * @link https://docs.malga.io/docs/api-sdks/docs/charges/refund-charge
     *
     * @param id - Charge ID
     * @param payload - object with `amount` value
     * @param options - API options like `idempotencyKey`
     * @returns Charge API Response
     *
     * @example
     * ```
     * import { Malga } from 'malga'
     *
     * const malga = new Malga({
     *   apiKey: 'API_KEY',
     *   clientId: 'CLIENT_ID',
     * })
     *
     * await malga.charges.refund('575f9a3c-6e40-4077-852e-c6781dc3c7c7', {
     *   amount: 100
     * })
     * ```
     */
    refund(id: string, payload: ChargeRefundPayload, options?: ApiPostOptions): Promise<ChargeRefundResponse>;
}

declare class Malga {
    readonly auth: Auth;
    readonly cards: Cards;
    readonly charges: Charges;
    readonly customers: Customers;
    readonly sandbox: Sandbox;
    readonly sellers: Sellers;
    readonly sessions: Sessions;
    readonly webhooks: Webhooks;
    constructor(configurations: MalgaConfigurations);
}

export { type ApiPaginateParamsBase, ApiPaginateSort, type ApiPostOptions, type AuthCreatePublicKeyPayload, type AuthCreatePublicKeyResponse, AuthScope, type CardCreatePayload, type CardCreateResponse, type CardFindResponse, type CardListParams, type CardListResponse, type CardResponse, type CardTokenizationPayload, type CardTokenizationResponse, type ChargeCapturePayload, type ChargeCaptureResponse, type ChargeCreatePayload, type ChargeCreateResponse, type ChargeFindResponse, type ChargeListParams, type ChargeListResponse, type ChargeRefundPayload, type ChargeRefundResponse, ChargeStatus, type CustomerCardsResponse, type CustomerCreateOptions, type CustomerCreatePayload, type CustomerCreateResponse, type CustomerFindResponse, type CustomerLinkCardPayload, type CustomerListParams, type CustomerListResponse, type CustomerUpdatePayload, type CustomerUpdateResponse, Malga, type MalgaErrorResponse, type SandboxChangeAntifraudStatusPayload, type SandboxChangeAntifraudStatusResponse, type SandboxChangeChargeStatusPayload, type SandboxChangeChargeStatusResponse, type SandboxGenerateCardParams, type SandboxGenerateCardResponse, type SellerCreatePayload, type SellerCreateResponse, type SellerFindResponse, type SellerListParams, type SellerListResponse, type SellerRemovePayload, type SellerUpdatePayload, type SellerUpdateResponse, type SessionCancelResponse, type SessionCreatePayload, type SessionCreateResponse, type SessionFindResponse, type SessionListParams, type SessionListResponse, type SessionToggleActiveStatusResponse };
