var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __reflectGet = Reflect.get;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/auth/auth.ts
var Auth = class {
  constructor(api) {
    this.api = api;
  }
  /**
   * Create a publicKey
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/auth/create-public-key
   *
   * @param payload - Send the `scope` that determines access to endpoints and the `expires` in seconds for the key expiration time
   * @param options - API options like `idempotencyKey`
   * @returns Customer API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const { publicKey } = await malga.auth.createPublicKey({
   *   scope: ['tokens', 'cards'],
   *   expires: 600, // in seconds
   * })
   * ```
   */
  createPublicKey(payload, options) {
    return __async(this, null, function* () {
      return this.api.post("/auth", payload, options == null ? void 0 : options.idempotencyKey);
    });
  }
};

// src/customers/customers.ts
var Customers = class {
  constructor(api) {
    this.api = api;
  }
  /**
   * Create a customer
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/customers/create-customer
   *
   * @param payload - Customer object
   * @param options - API options like `idempotencyKey`
   * @returns Customer API response
   *
   * @example
   * Here is an example of how to create a customer
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const customer = await malga.customers.create({
   *   name: 'Homer Simpson',
   *   email: 'homer@simpsons.com',
   *   phoneNumber: '99999999999',
   *   document: {
   *     type: 'cpf',
   *     number: '99999999999',
   *     country: 'BR',
   *   },
   *   address: {
   *     street: 'Evergreen Terrace',
   *     streetNumber: '742',
   *     zipCode: '62629',
   *     country: 'US',
   *     state: 'Louisiana',
   *     city: 'Springfield',
   *     district: 'Suburb',
   *     complement: 'Residence',
   *   },
   * })
   * ```
   *
   * * @example
   * Here is an example of how to create a customer while removing email and document duplication checks
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const customer = await malga.customers.create({
   *   name: 'Homer Simpson',
   *   email: 'homer@simpsons.com',
   *   phoneNumber: '99999999999',
   *   document: {
   *     type: 'cpf',
   *     number: '99999999999',
   *     country: 'BR',
   *   },
   *   address: {
   *     street: 'Evergreen Terrace',
   *     streetNumber: '742',
   *     zipCode: '62629',
   *     country: 'US',
   *     state: 'Louisiana',
   *     city: 'Springfield',
   *     district: 'Suburb',
   *     complement: 'Residence',
   *   },
   * }, { force: true })
   * ```
   */
  create(payload, options) {
    return __async(this, null, function* () {
      const endpoint = (options == null ? void 0 : options.force) ? `/customers?force=${!!options.force}` : "/customers";
      return this.api.post(endpoint, payload, options == null ? void 0 : options.idempotencyKey);
    });
  }
  /**
   * Find customer details
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/customers/find-customer
   *
   * @param id - Customer ID
   * @returns Customer API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const customer = await malga.customers.find('e917fc6d-c640-47a1-83eb-aa820dbd92fe')
   * ```
   */
  find(id) {
    return __async(this, null, function* () {
      return this.api.get(`/customers/${id}`);
    });
  }
  /**
   * List the customers
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/customers/list-customers
   *
   * @param params - Filter params
   * @returns Customer API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const customers = await malga.customers.list({ page: 1, limit: 15 })
   * ```
   */
  list(params) {
    return __async(this, null, function* () {
      const parsedParams = {
        page: params == null ? void 0 : params.page,
        limit: params == null ? void 0 : params.limit,
        sort: params == null ? void 0 : params.sort,
        "document.type": params == null ? void 0 : params.documentType,
        "document.number": params == null ? void 0 : params.documentNumber
      };
      return this.api.paginate("/customers", parsedParams);
    });
  }
  /**
   * Update the customer
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/customers/update-customer
   *
   * @param id - Customer ID
   * @param payload - Updated customer object
   * @returns Customer API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const customer = await malga.customers.update(
   *  '575f9a3c-6e40-4077-852e-c6781dc3c7c7',
   *  { name: 'Bart Simpson', phoneNumber: '99999999998' }
   * )
   * ```
   */
  update(id, payload) {
    return __async(this, null, function* () {
      return this.api.patch(`/customers/${id}`, payload);
    });
  }
  /**
   * Remove the customer
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/customers/remove-customer
   *
   * @param id - Customer ID
   * @returns void
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * await malga.customers.remove('575f9a3c-6e40-4077-852e-c6781dc3c7c7')
   * ```
   */
  remove(id) {
    return __async(this, null, function* () {
      return this.api.delete(`/customers/${id}`);
    });
  }
  /**
   * List customer cards
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/customers/find-customer
   *
   * @param id - Customer ID
   * @returns void
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const customerCards = await malga.customers.cards('575f9a3c-6e40-4077-852e-c6781dc3c7c7')
   * ```
   */
  cards(id) {
    return __async(this, null, function* () {
      return this.api.get(`/customers/${id}/cards`);
    });
  }
  /**
   * Link customer to card
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/customers/link-card-customer
   *
   * @param id - Customer ID
   * @param payload - Card informations
   * @returns void
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * await malga.customers.linkCard('575f9a3c-6e40-4077-852e-c6781dc3c7c7', {
   *   cardId: '13c2a9c0-9936-4024-b8a8-1952dbdc5460'
   * })
   * ```
   */
  linkCard(id, payload, options) {
    return __async(this, null, function* () {
      return this.api.post(
        `/customers/${id}/cards`,
        payload,
        options == null ? void 0 : options.idempotencyKey
      );
    });
  }
};

// src/sellers/sellers.ts
var Sellers = class {
  constructor(api) {
    this.api = api;
  }
  /**
   * Create a seller
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sellers/create-seller
   *
   * @param payload - Seller object
   * @param options - API options like `idempotencyKey`
   * @returns Seller API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const seller = await malga.sellers.create({
   *   merchantId: 'aa2ec134-6164-4b5b-a7e2-85daefec318d',
   *   mcc: 1,
   *   owner: {
   *     name: 'Homer Simpson',
   *     email: 'homer@simpsons.com',
   *     phoneNumber: '99999999999',
   *     birthdate: '1989-12-17',
   *     document: {
   *       type: 'cpf',
   *       number: '99999999999',
   *       country: 'BR',
   *     },
   *     address: {
   *      street: 'Evergreen Terrace',
   *      streetNumber: '742',
   *      zipCode: '62629',
   *      country: 'US',
   *      state: 'Louisiana',
   *      city: 'Springfield',
   *      district: 'Suburb',
   *      complement: 'Residence',
   *     },
   *   },
   *   bankAccount: {
   *     holderName: 'Homer Simpson',
   *     holderDocument: '99999999999',
   *     bank: '077',
   *     branchNumber: '492',
   *     branchCheckDigit: '1',
   *     accountNumber: '4929',
   *     accountCheckDigit: '22',
   *     type: 'conta_corrente',
   *   },
   *   transferPolicy: {
   *     transferDay: 5,
   *     transferEnabled: true,
   *     transferInterval: 'weekly',
   *     automaticAnticipationEnabled: false,
   *   },
   *   metadata: [{
   *     key: '768093',
   *     value: 'Additional information',
   *   }],
   * })
   * ```
   */
  create(payload, options) {
    return __async(this, null, function* () {
      return this.api.post("/sellers", payload, options == null ? void 0 : options.idempotencyKey);
    });
  }
  /**
   * Find seller details
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sellers/find-seller
   *
   * @param id - Seller ID
   * @returns Seller API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const seller = await malga.sellers.find('e917fc6d-c640-47a1-83eb-aa820dbd92fe')
   * ```
   */
  find(id) {
    return __async(this, null, function* () {
      return this.api.get(`/sellers/${id}`);
    });
  }
  /**
   * List the sellers
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sellers/list-sellers
   *
   * @param params - Filter params
   * @returns Seller API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const sellers = await malga.sellers.list({ page: 1, limit: 15 })
   * ```
   */
  list(params) {
    return __async(this, null, function* () {
      var _a;
      const parsedParams = __spreadProps(__spreadValues({}, params), {
        email: params == null ? void 0 : params.email,
        status: (_a = params == null ? void 0 : params.status) == null ? void 0 : _a.join()
      });
      return this.api.paginate("/sellers", parsedParams);
    });
  }
  /**
   * Update the seller
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sellers/update-seller
   *
   * @param id - Seller ID
   * @param payload - Updated seller object
   * @returns Seller API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const seller = await malga.sellers.update('575f9a3c-6e40-4077-852e-c6781dc3c7c7', {
   *   merchantId: 'aa2ec134-6164-4b5b-a7e2-85daefec318d',
   *   mcc: 1,
   *   owner: {
   *     name: 'Homer Simpson',
   *     email: 'homer@simpsons.com',
   *     phoneNumber: '99999999999',
   *     birthdate: '1989-12-17',
   *     document: {
   *       type: 'cpf',
   *       number: '99999999999',
   *       country: 'BR',
   *     },
   *     address: {
   *      street: 'Evergreen Terrace',
   *      streetNumber: '742',
   *      zipCode: '62629',
   *      country: 'US',
   *      state: 'Louisiana',
   *      city: 'Springfield',
   *      district: 'Suburb',
   *      complement: 'Residence',
   *     },
   *   },
   *   bankAccount: {
   *     holderName: 'Homer Simpson',
   *     holderDocument: '99999999999',
   *     bank: '077',
   *     branchNumber: '492',
   *     branchCheckDigit: '1',
   *     accountNumber: '4929',
   *     accountCheckDigit: '22',
   *     type: 'conta_corrente',
   *   },
   *   transferPolicy: {
   *     transferDay: 5,
   *     transferEnabled: true,
   *     transferInterval: 'weekly',
   *     automaticAnticipationEnabled: false,
   *   },
   *   metadata: [{
   *     key: '768093',
   *     value: 'Additional information',
   *   }],
   * })
   * ```
   */
  update(id, payload) {
    return __async(this, null, function* () {
      return this.api.patch(`/sellers/${id}`, payload);
    });
  }
  /**
   * Remove the seller
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sellers/remove-seller
   *
   * @param id - Seller ID
   * @returns void
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * await malga.sellers.remove('575f9a3c-6e40-4077-852e-c6781dc3c7c7', {
   *   merchantId: 'aa2ec134-6164-4b5b-a7e2-85daefec318d',
   * })
   * ```
   */
  remove(id, payload) {
    return __async(this, null, function* () {
      return this.api.delete(`/sellers/${id}`, payload);
    });
  }
};

// src/sessions/sessions.ts
var Sessions = class {
  constructor(api) {
    this.api = api;
  }
  /**
   * Create a session
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sessions/create-session
   *
   * @param payload - Session object
   * @param options - API options like `idempotencyKey`
   * @returns Session API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const session = await malga.sessions.create({
   *   name: 'First Session',
   *   amount: 100,
   *   merchantId: 'aa2ec134-6164-4b5b-a7e2-85daefec318d',
   *   dueDate: '2023-12-27T03:00:00.000Z',
   *   paymentMethods: [
   *     { paymentType: 'credit', installments: 1 },
   *     { paymentType: 'pix', expiresIn: 60 },
   *   ],
   *   items: [
   *     { name: 'Product 1', quantity: 1, unitPrice: 100 },
   *   ],
   * })
   * ```
   */
  create(payload, options) {
    return __async(this, null, function* () {
      return this.api.post("/sessions", payload, options == null ? void 0 : options.idempotencyKey);
    });
  }
  /**
   * Find session details
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sessions/find-session
   *
   * @param id - Session ID
   * @returns Session API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const session = await malga.sessions.find('e917fc6d-c640-47a1-83eb-aa820dbd92fe')
   * ```
   */
  find(id) {
    return __async(this, null, function* () {
      return this.api.get(`/sessions/${id}`);
    });
  }
  /**
   * List the sessions
   *
   * @param params - Filter params
   * @returns Session API response
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sessions/list-sessions
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const sessions = await malga.sessions.list({
   *   page: 1,
   *   limit: 15,
   *   startDate: '2023-09-17T03:00:00.000Z',
   *   endDate: '2023-09-23T02:59:59.999Z',
   * })
   * ```
   */
  list(params) {
    return __async(this, null, function* () {
      var _a, _b;
      const parsedParams = {
        page: params == null ? void 0 : params.page,
        limit: params == null ? void 0 : params.limit,
        status: (_a = params == null ? void 0 : params.status) == null ? void 0 : _a.join(),
        isActive: (_b = params == null ? void 0 : params.isActive) == null ? void 0 : _b.join(),
        "created.gt": params == null ? void 0 : params.startDate,
        "created.lt": params == null ? void 0 : params.endDate
      };
      return this.api.paginate("/sessions", parsedParams);
    });
  }
  /**
   * Cancel the session
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sessions/cancel-session
   *
   * @param id - Session ID
   * @returns Session API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * await malga.sessions.cancel('575f9a3c-6e40-4077-852e-c6781dc3c7c7')
   * ```
   */
  cancel(id) {
    return __async(this, null, function* () {
      return this.api.post(`/sessions/${id}/cancel`);
    });
  }
  /**
   * Enable the session
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sessions/enable-session
   *
   * @param id - Session ID
   * @returns Session API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * await malga.sessions.enable('575f9a3c-6e40-4077-852e-c6781dc3c7c7')
   * ```
   */
  enable(id) {
    return __async(this, null, function* () {
      return this.api.patch(`/sessions/${id}`, { isActive: true });
    });
  }
  /**
   * Disable the session
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sessions/disable-session
   *
   * @param id - Session ID
   * @returns Session API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * await malga.sessions.disable('575f9a3c-6e40-4077-852e-c6781dc3c7c7')
   * ```
   */
  disable(id) {
    return __async(this, null, function* () {
      return this.api.patch(`/sessions/${id}`, { isActive: false });
    });
  }
};

// src/webhooks/webhooks.ts
import crypto from "crypto";
var Webhooks = class {
  constructor() {
  }
  /**
   * Verify the event signature
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/webhooks/verify-event-webhook
   *
   * @param params - Object with webhook data for signature verification
   * @returns {bool}
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const verified = malga.webhooks.verify({
   *   payload: '{"event":"ping","payload":{"object":{}}}',
   *   publicKey: '-----BEGIN PUBLIC KEY-----\nMCwBQYDK2VwAyEASdad=\n-----END PUBLIC KEY-----\n',
   *   signature: '5b20c43cfd55f0c1884196'
   *   signatureTime: 1661795163719,
   * })
   * ```
   */
  verify(params) {
    const payload = Buffer.from(params.payload, "utf-8").toString();
    const signature = Buffer.from(params.signature, "hex");
    const data = Buffer.from(`${params.signatureTime}
${payload}`);
    return crypto.verify(null, data, params.publicKey, signature);
  }
};

// src/sandbox/sandbox.utils.ts
var nextYear = (/* @__PURE__ */ new Date()).getFullYear() + 1;
var expirationDate = `03/${nextYear}`;
var cards = {
  Mastercard: {
    authorized: { number: "5214254988499590", cvv: "220", expirationDate },
    unauthorized: { number: "5171407375927752", cvv: "300", expirationDate },
    timeout: { number: "5402839904300856", cvv: "130", expirationDate },
    authorized_or_timeout: {
      number: "5491266201550748",
      cvv: "260",
      expirationDate
    },
    blocked_card: { number: "5521448129190195", cvv: "880", expirationDate },
    canceled_card: { number: "5597251149584267", cvv: "340", expirationDate },
    expired_card: { number: "5462320441541663", cvv: "830", expirationDate },
    invalid_cvv: { number: "5240675434648372", cvv: "231", expirationDate }
  },
  Visa: {
    authorized: { number: "4916745120294124", cvv: "560", expirationDate },
    unauthorized: { number: "4916878170842862", cvv: "650", expirationDate },
    timeout: { number: "4485401945979546", cvv: "600", expirationDate },
    authorized_or_timeout: {
      number: "4556613630132678",
      cvv: "850",
      expirationDate
    },
    blocked_card: { number: "4556684530238865", cvv: "440", expirationDate },
    canceled_card: { number: "4485406132091427", cvv: "170", expirationDate },
    expired_card: { number: "4532552729063643", cvv: "660", expirationDate },
    invalid_cvv: { number: "4716866286004545", cvv: "965", expirationDate }
  },
  Amex: {
    authorized: { number: "371511430434941", cvv: "6560", expirationDate },
    unauthorized: { number: "346924402646172", cvv: "8460", expirationDate },
    timeout: { number: "372763217194656", cvv: "3290", expirationDate },
    authorized_or_timeout: {
      number: "379769909235288",
      cvv: "3240",
      expirationDate
    },
    blocked_card: { number: "341033144189205", cvv: "4990", expirationDate },
    canceled_card: { number: "342582504975297", cvv: "6820", expirationDate },
    expired_card: { number: "377134064055173", cvv: "6240", expirationDate },
    invalid_cvv: { number: "340035263979895", cvv: "7552", expirationDate }
  },
  HiperCard: {
    authorized: { number: "6062829302997360", cvv: "980", expirationDate },
    unauthorized: { number: "6062820734125142", cvv: "520", expirationDate },
    timeout: { number: "6062828660520236", cvv: "970", expirationDate },
    authorized_or_timeout: {
      number: "6062827833068438",
      cvv: "720",
      expirationDate
    },
    blocked_card: { number: "6062825739079475", cvv: "530", expirationDate },
    canceled_card: { number: "6062824159779557", cvv: "480", expirationDate },
    expired_card: { number: "6062820196712783", cvv: "840", expirationDate },
    invalid_cvv: { number: "6062823576109778", cvv: "347", expirationDate }
  },
  DinersClub: {
    authorized: { number: "36757624613710", cvv: "490", expirationDate },
    unauthorized: { number: "30306641444422", cvv: "900", expirationDate },
    timeout: { number: "30308603779936", cvv: "540", expirationDate },
    authorized_or_timeout: {
      number: "30392608411448",
      cvv: "410",
      expirationDate
    },
    blocked_card: { number: "30089464740585", cvv: "180", expirationDate },
    canceled_card: { number: "36176932295997", cvv: "660", expirationDate },
    expired_card: { number: "38955717860903", cvv: "230", expirationDate },
    invalid_cvv: { number: "30383606498545", cvv: "138", expirationDate }
  }
};

// src/sandbox/sandbox.ts
var Sandbox = class {
  constructor(api, isSandbox) {
    this.api = api;
    this.isSandbox = isSandbox;
  }
  /**
   * Change the charge status in the sandbox
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sandbox/change-charge-status
   *
   * @param id - Charge ID
   * @param payload - Object with expected status
   * @returns Charge API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   *   options: { sandbox: true }
   * })
   *
   * const charge = await malga.sandbox.changeChargeStatus(
   *  'b6a4bf0c-1540-4403-aa3b-f5b327cc4f6f',
   *  {
   *   status: 'voided'
   *  }
   * )
   * ```
   */
  changeChargeStatus(id, payload) {
    return __async(this, null, function* () {
      if (!this.isSandbox) {
        throw new Error(
          `This module only works in the sandbox environment. To enable it, simply pass:

        const malga = new Malga({
          apiKey: "<YOUR_API_KEY>,
          clientId: "<YOUR_CLIENT_ID>",
          options: { sandbox: true }
        })`
        );
      }
      return this.api.post(`/charges/${id}`, payload);
    });
  }
  /**
   * Change the antifraud status in the sandbox
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sandbox/change-antifraud-status
   *
   * @param id - Charge ID
   * @param payload - Object with expected status
   * @returns Charge API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   *   options: { sandbox: true }
   * })
   *
   * const charge = await malga.sandbox.changeAntifraudStatus(
   *  'b6a4bf0c-1540-4403-aa3b-f5b327cc4f6f',
   *  {
   *   status: 'reproved'
   *  }
   * )
   * ```
   */
  changeAntifraudStatus(id, payload) {
    return __async(this, null, function* () {
      if (!this.isSandbox) {
        throw new Error(
          `This module only works in the sandbox environment. To enable it, simply pass:

        const malga = new Malga({
          apiKey: "<YOUR_API_KEY>,
          clientId: "<YOUR_CLIENT_ID>",
          options: { sandbox: true }
        })`
        );
      }
      return this.api.patch(`/charges/${id}/antifraud`, payload);
    });
  }
  /**
   * Card generator for use in a sandbox environment
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/sandbox/generate-card
   *
   * @param params - Object with the card brand and the expected status
   * @returns card with `number`, `cvv` and `expirationDate`
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   *   options: { sandbox: true }
   * })
   *
   * const card = malga.sandbox.generateCard({
   *   brand: 'Mastercard',
   *   status: 'expired_card'
   * })
   * ```
   */
  generateCard(params) {
    if (!this.isSandbox) {
      throw new Error(
        `This module only works in the sandbox environment. To enable it, simply pass:

        const malga = new Malga({
          apiKey: "<YOUR_API_KEY>,
          clientId: "<YOUR_CLIENT_ID>",
          options: { sandbox: true }
        })`
      );
    }
    return cards[params.brand][params.status];
  }
};

// src/cards/cards.ts
var Cards = class {
  constructor(api) {
    this.api = api;
  }
  /**
   * Create a card
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/cards/create-card
   *
   * @param payload - Card object
   * @param options - API options like `idempotencyKey`
   * @returns Card API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const card = await malga.cards.create({
   *   tokenId: '931e1028-68b2-47b8-a534-3a59d5b45361',
   *   zeroDollar: {
   *     merchantId: 'aa2ec134-6164-4b5b-a7e2-85daefec318d',
   *     cvvCheck: true
   *   }
   * })
   * ```
   */
  create(payload, options) {
    return __async(this, null, function* () {
      return this.api.post("/cards", payload, options == null ? void 0 : options.idempotencyKey);
    });
  }
  /**
   * Find card details
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/cards/find-card
   *
   * @param id - Card ID
   * @returns Card API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const card = await malga.cards.find('e917fc6d-c640-47a1-83eb-aa820dbd92fe')
   * ```
   */
  find(id) {
    return __async(this, null, function* () {
      return this.api.get(`/cards/${id}`);
    });
  }
  /**
   * List the cards
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/cards/list-cards
   *
   * @param params - Filter params
   * @returns Card API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const cards = await malga.cards.list({
   *   page: 1,
   *   limit: 15,
   * })
   * ```
   */
  list(params) {
    return __async(this, null, function* () {
      return this.api.paginate("/cards", params);
    });
  }
  /**
   * Create a tokenized card or CVV
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/cards/tokenization-card
   *
   * @param payload - Token object
   * @param options - API options like `idempotencyKey`
   * @returns Token API response
   *
   * @example
   * Here is an example of how to tokenize a card:
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const tokenId = await malga.cards.tokenization({
   *   holderName: 'Homer Simpson',
   *   number: '5402502027127339'
   *   cvv: '391',
   *   expirationDate: '01/2025'
   * })
   * ```
   *
   * @example
   * Here is an example of how to tokenize a CVV:
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const tokenCvv = await malga.cards.tokenization({
   *   cvv: '170',
   * })
   * ```
   */
  tokenization(payload, options) {
    return __async(this, null, function* () {
      const shouldTokenizeCard = [
        "holderName",
        "number",
        "cvv",
        "expirationDate"
      ].every((key) => !!payload[key]);
      const parsedPayload = shouldTokenizeCard ? {
        cardNumber: payload.number,
        cardCvv: payload.cvv,
        cardExpirationDate: payload.expirationDate,
        cardHolderName: payload.holderName
      } : { cvvUpdate: payload.cvv };
      return this.api.post("/tokens", parsedPayload, options == null ? void 0 : options.idempotencyKey);
    });
  }
};

// package.json
var version = "0.0.1";

// src/charges/handlers/base/base.ts
var BaseHandler = class {
  constructor() {
    this.nextHandler = null;
  }
  setNext(handler) {
    this.nextHandler = handler;
    return handler;
  }
  handle(payload) {
    if (this.nextHandler) {
      return this.nextHandler.handle(payload);
    }
    return payload;
  }
};

// src/charges/handlers/charge/charge.ts
var ChargeHandler = class extends BaseHandler {
  handle(payload) {
    const _a = payload, { threeDSecure } = _a, rest = __objRest(_a, ["threeDSecure"]);
    const threeDSecure2 = (payload == null ? void 0 : payload.threeDSecure) && {
      threeDSecure2: threeDSecure
    };
    const charge = __spreadProps(__spreadValues(__spreadValues({}, rest), threeDSecure2), {
      appInfo: __spreadProps(__spreadValues({}, rest.appInfo), {
        platform: {
          name: "SDK Node.js",
          integrator: "Malga",
          version
        }
      })
    });
    return super.handle(charge);
  }
};

// src/charges/handlers/boleto/boleto.ts
var BoletoHandler = class extends BaseHandler {
  parsePaymentMethod(paymentMethod) {
    const _a = paymentMethod, { type } = _a, rest = __objRest(_a, ["type"]);
    return __spreadValues({
      paymentType: "boleto"
    }, rest);
  }
  parsePaymentSource(customer, customerId) {
    if (!customer && !customerId)
      return {};
    if (customerId) {
      return {
        sourceType: "customer",
        customerId
      };
    }
    return {
      sourceType: "customer",
      customer
    };
  }
  handle(payload) {
    var _a;
    if (((_a = payload.paymentMethod) == null ? void 0 : _a.type) !== "boleto") {
      return super.handle(payload);
    }
    const _b = payload, { paymentMethod, customer, customerId } = _b, rest = __objRest(_b, ["paymentMethod", "customer", "customerId"]);
    return super.handle(__spreadProps(__spreadValues({}, rest), {
      paymentMethod: this.parsePaymentMethod(paymentMethod),
      paymentSource: this.parsePaymentSource(customer, customerId)
    }));
  }
};

// src/charges/handlers/credit/credit.ts
var CreditHandler = class _CreditHandler extends BaseHandler {
  constructor(cards2, customers) {
    super();
    this.cards = cards2;
    this.customers = customers;
  }
  parseCustomer(customer, customerId) {
    return __async(this, null, function* () {
      if (!customer && !customerId)
        return null;
      if (customer) {
        const { id } = yield this.customers.create(customer);
        return id;
      }
      return customerId;
    });
  }
  parsePaymentMethod(paymentMethod) {
    const _a = paymentMethod, {
      type,
      card,
      cardCvv,
      cardId,
      linkCardToCustomer,
      tokenCvv,
      tokenId
    } = _a, rest = __objRest(_a, [
      "type",
      "card",
      "cardCvv",
      "cardId",
      "linkCardToCustomer",
      "tokenCvv",
      "tokenId"
    ]);
    return __spreadValues({
      paymentType: "credit"
    }, rest);
  }
  parsePaymentSource(paymentMethod, customerId) {
    return __async(this, null, function* () {
      var _a, _b;
      if (!paymentMethod.tokenId && !paymentMethod.cardId && !paymentMethod.card) {
        return null;
      }
      if (paymentMethod.card) {
        const { tokenId } = yield this.cards.tokenization({
          holderName: paymentMethod.card.holderName,
          number: paymentMethod.card.number,
          cvv: paymentMethod.card.cvv,
          expirationDate: paymentMethod.card.expirationDate
        });
        if ((_a = paymentMethod.card) == null ? void 0 : _a.zeroDollar) {
          const { id } = yield this.cards.create({
            tokenId,
            zeroDollar: (_b = paymentMethod.card) == null ? void 0 : _b.zeroDollar
          });
          if (customerId && paymentMethod.linkCardToCustomer) {
            yield this.customers.linkCard(customerId, { cardId: id });
          }
          return {
            sourceType: "card",
            cardId: id
          };
        }
        return {
          sourceType: "token",
          tokenId
        };
      }
      if (paymentMethod.cardId) {
        const tokenCvv = paymentMethod.tokenCvv && {
          tokenCvv: paymentMethod.tokenCvv
        };
        const cardCvv = paymentMethod.cardCvv && {
          cardCvv: paymentMethod.cardCvv
        };
        if (customerId && paymentMethod.linkCardToCustomer) {
          yield this.customers.linkCard(customerId, {
            cardId: paymentMethod.cardId
          });
        }
        return __spreadValues(__spreadValues({
          sourceType: "card",
          cardId: paymentMethod.cardId
        }, tokenCvv), cardCvv);
      }
      return {
        sourceType: "token",
        tokenId: paymentMethod.tokenId
      };
    });
  }
  handle(payload) {
    return __async(this, null, function* () {
      var _a;
      if (((_a = payload.paymentMethod) == null ? void 0 : _a.type) !== "credit") {
        return __superGet(_CreditHandler.prototype, this, "handle").call(this, payload);
      }
      const _b = payload, { paymentMethod, customer, customerId } = _b, rest = __objRest(_b, ["paymentMethod", "customer", "customerId"]);
      const currentCustomerId = yield this.parseCustomer(customer, customerId);
      return __superGet(_CreditHandler.prototype, this, "handle").call(this, __spreadProps(__spreadValues({}, rest), {
        customerId: currentCustomerId,
        paymentMethod: this.parsePaymentMethod(paymentMethod),
        paymentSource: yield this.parsePaymentSource(
          paymentMethod,
          currentCustomerId
        )
      }));
    });
  }
};

// src/charges/handlers/drip/drip.ts
var DripHandler = class extends BaseHandler {
  parsePaymentMethod(paymentMethod) {
    const _a = paymentMethod, { type } = _a, rest = __objRest(_a, ["type"]);
    return __spreadValues({
      paymentType: "drip"
    }, rest);
  }
  parsePaymentSource(customer, customerId) {
    if (!customer && !customerId)
      return {};
    if (customerId) {
      return {
        sourceType: "customer",
        customerId
      };
    }
    return {
      sourceType: "customer",
      customer
    };
  }
  handle(payload) {
    var _a;
    if (((_a = payload.paymentMethod) == null ? void 0 : _a.type) !== "drip") {
      return super.handle(payload);
    }
    const _b = payload, { paymentMethod, customer, customerId } = _b, rest = __objRest(_b, ["paymentMethod", "customer", "customerId"]);
    return super.handle(__spreadProps(__spreadValues({}, rest), {
      paymentMethod: this.parsePaymentMethod(paymentMethod),
      paymentSource: this.parsePaymentSource(customer, customerId)
    }));
  }
};

// src/charges/handlers/nupay/nupay.ts
var NuPayHandler = class extends BaseHandler {
  parsePaymentMethod(paymentMethod) {
    const _a = paymentMethod, { type, items } = _a, rest = __objRest(_a, ["type", "items"]);
    return __spreadValues({
      paymentType: "nupay"
    }, rest);
  }
  parsePaymentSource(customer, customerId) {
    if (!customer && !customerId)
      return {};
    if (customerId) {
      return {
        sourceType: "customer",
        customerId
      };
    }
    return {
      sourceType: "customer",
      customer
    };
  }
  handle(payload) {
    var _a, _c;
    if (((_a = payload.paymentMethod) == null ? void 0 : _a.type) !== "nupay") {
      return super.handle(payload);
    }
    const _b = payload, { paymentMethod, customer, customerId } = _b, rest = __objRest(_b, ["paymentMethod", "customer", "customerId"]);
    return super.handle(__spreadProps(__spreadValues({}, rest), {
      paymentMethod: this.parsePaymentMethod(paymentMethod),
      paymentSource: this.parsePaymentSource(customer, customerId),
      fraudAnalysis: __spreadProps(__spreadValues({}, rest.fraudAnalysis), {
        cart: __spreadProps(__spreadValues({}, (_c = rest.fraudAnalysis) == null ? void 0 : _c.cart), { items: paymentMethod.items })
      })
    }));
  }
};

// src/charges/handlers/pix/pix.ts
var PixHandler = class extends BaseHandler {
  parsePaymentMethod(paymentMethod) {
    const _a = paymentMethod, { type } = _a, rest = __objRest(_a, ["type"]);
    return __spreadValues({
      paymentType: "pix"
    }, rest);
  }
  parsePaymentSource(customer, customerId) {
    if (!customer && !customerId)
      return {};
    if (customerId) {
      return {
        sourceType: "customer",
        customerId
      };
    }
    return {
      sourceType: "customer",
      customer
    };
  }
  handle(payload) {
    var _a;
    if (((_a = payload.paymentMethod) == null ? void 0 : _a.type) !== "pix") {
      return super.handle(payload);
    }
    const _b = payload, { paymentMethod, customer, customerId } = _b, rest = __objRest(_b, ["paymentMethod", "customer", "customerId"]);
    return super.handle(__spreadProps(__spreadValues({}, rest), {
      paymentMethod: this.parsePaymentMethod(paymentMethod),
      paymentSource: this.parsePaymentSource(customer, customerId)
    }));
  }
};

// src/charges/handlers/voucher/voucher.ts
var VoucherHandler = class _VoucherHandler extends BaseHandler {
  constructor(cards2, customers) {
    super();
    this.cards = cards2;
    this.customers = customers;
  }
  parseCustomer(customer, customerId) {
    return __async(this, null, function* () {
      if (!customer && !customerId)
        return null;
      if (customer) {
        const { id } = yield this.customers.create(customer);
        return id;
      }
      return customerId;
    });
  }
  parsePaymentMethod(paymentMethod) {
    const _a = paymentMethod, {
      type,
      card,
      cardCvv,
      cardId,
      linkCardToCustomer,
      tokenCvv,
      tokenId
    } = _a, rest = __objRest(_a, [
      "type",
      "card",
      "cardCvv",
      "cardId",
      "linkCardToCustomer",
      "tokenCvv",
      "tokenId"
    ]);
    return __spreadValues({
      paymentType: "voucher"
    }, rest);
  }
  parsePaymentSource(paymentMethod, customerId) {
    return __async(this, null, function* () {
      var _a, _b;
      if (!paymentMethod.tokenId && !paymentMethod.cardId && !paymentMethod.card) {
        return null;
      }
      if (paymentMethod.card) {
        const { tokenId } = yield this.cards.tokenization({
          holderName: paymentMethod.card.holderName,
          number: paymentMethod.card.number,
          cvv: paymentMethod.card.cvv,
          expirationDate: paymentMethod.card.expirationDate
        });
        if ((_a = paymentMethod.card) == null ? void 0 : _a.zeroDollar) {
          const { id } = yield this.cards.create({
            tokenId,
            zeroDollar: (_b = paymentMethod.card) == null ? void 0 : _b.zeroDollar
          });
          if (customerId && paymentMethod.linkCardToCustomer) {
            yield this.customers.linkCard(customerId, {
              cardId: id
            });
          }
          return {
            sourceType: "card",
            cardId: id
          };
        }
        return {
          sourceType: "token",
          tokenId
        };
      }
      if (paymentMethod.cardId) {
        const tokenCvv = paymentMethod.tokenCvv && {
          tokenCvv: paymentMethod.tokenCvv
        };
        const cardCvv = paymentMethod.cardCvv && {
          cardCvv: paymentMethod.cardCvv
        };
        if (customerId && paymentMethod.linkCardToCustomer) {
          yield this.customers.linkCard(customerId, {
            cardId: paymentMethod.cardId
          });
        }
        return __spreadValues(__spreadValues({
          sourceType: "card",
          cardId: paymentMethod.cardId
        }, tokenCvv), cardCvv);
      }
      return {
        sourceType: "token",
        tokenId: paymentMethod.tokenId
      };
    });
  }
  handle(payload) {
    return __async(this, null, function* () {
      var _a;
      if (((_a = payload.paymentMethod) == null ? void 0 : _a.type) !== "voucher") {
        return __superGet(_VoucherHandler.prototype, this, "handle").call(this, payload);
      }
      const _b = payload, { paymentMethod, customer, customerId } = _b, rest = __objRest(_b, ["paymentMethod", "customer", "customerId"]);
      const currentCustomerId = yield this.parseCustomer(customer, customerId);
      return __superGet(_VoucherHandler.prototype, this, "handle").call(this, __spreadProps(__spreadValues({}, rest), {
        customerId: currentCustomerId,
        paymentMethod: this.parsePaymentMethod(paymentMethod),
        paymentSource: yield this.parsePaymentSource(paymentMethod)
      }));
    });
  }
};

// src/charges/handlers/session/session.ts
var SessionHandler = class extends BaseHandler {
  handle(payload) {
    if (payload == null ? void 0 : payload.sessionId) {
      const _a = payload, { sessionId, publicKey, appInfo } = _a, rest = __objRest(_a, ["sessionId", "publicKey", "appInfo"]);
      return super.handle(rest);
    }
    return super.handle(payload);
  }
};

// src/charges/builders/charge-create-builder/charge-create-builder.ts
var ChargeCreateBuilder = class {
  constructor(cards2, customers) {
    this.cards = cards2;
    this.customers = customers;
  }
  payload(payload) {
    return __async(this, null, function* () {
      const chargeHandler = new ChargeHandler();
      const creditHandler = new CreditHandler(this.cards, this.customers);
      const pixHandler = new PixHandler();
      const boletoHandler = new BoletoHandler();
      const dripHandler = new DripHandler();
      const nupayHandler = new NuPayHandler();
      const voucherHandler = new VoucherHandler(this.cards, this.customers);
      const sessionHandler = new SessionHandler();
      chargeHandler.setNext(creditHandler).setNext(pixHandler).setNext(boletoHandler).setNext(dripHandler).setNext(nupayHandler).setNext(voucherHandler).setNext(sessionHandler);
      return chargeHandler.handle(payload);
    });
  }
};

// src/charges/charges.ts
var Charges = class {
  constructor(api, cards2, customers) {
    this.api = api;
    this.cards = cards2;
    this.customers = customers;
  }
  /**
   * Create a charge
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/charges/create-charge-credit
   *
   * @param payload - Charge object
   * @param options - API options like `idempotencyKey`
   * @returns Charge API response
   *
   * @example
   * Here is an example of how to create a charge
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const charge = await malga.charges.create({
   *   merchantId: 'MERCHANT_ID',
   *   amount: 100,
   *   customer: {
   *     name: 'Homer Simpson',
   *     email: 'homer@simpsons.com',
   *     phoneNumber: '99999999999',
   *     document: {
   *       type: 'cpf',
   *       number: '99999999999',
   *       country: 'BR',
   *     },
   *     address: {
   *       street: 'Evergreen Terrace',
   *       streetNumber: '742',
   *       zipCode: '62629',
   *       country: 'US',
   *       state: 'Louisiana',
   *       city: 'Springfield',
   *       district: 'Suburb',
   *       complement: 'Residence'
   *     }
   *   },
   *   paymentMethod: {
   *     type: 'credit',
   *     card: {
   *       holderName: 'Homer Simpson',
   *       number: '5402502027127339'
   *       cvv: '391',
   *       expirationDate: '01/2025'
   *     }
   *   }
   * })
   * ```
   *
   * @example
   * Here is an example of how to create a charge with session
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const charge = await malga.charges.create({
   *   sessionId: 'SESSION_ID',
   *   publicKey: 'PUBLIC_KEY'
   *   customerId: 'CUSTOMER_ID',
   *   paymentMethod: {
   *     type: 'credit',
   *     card: {
   *       holderName: 'Homer Simpson',
   *       number: '5402502027127339'
   *       cvv: '391',
   *       expirationDate: '01/2025'
   *     }
   *   }
   * })
   * ```
   */
  create(payload, options) {
    return __async(this, null, function* () {
      const chargeCreateBuilder = new ChargeCreateBuilder(
        this.cards,
        this.customers
      );
      const sessionId = payload == null ? void 0 : payload.sessionId;
      const publicKey = sessionId && (payload == null ? void 0 : payload.publicKey);
      const parsedPayload = yield chargeCreateBuilder.payload(payload);
      return this.api.post(
        sessionId ? `/sessions/${sessionId}/charge` : "/charges",
        parsedPayload,
        options == null ? void 0 : options.idempotencyKey,
        publicKey
      );
    });
  }
  /**
   * Find charge details
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/charges/find-charge
   *
   * @param id - Charge ID
   * @returns Charge API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const charge = await malga.charges.find('e917fc6d-c640-47a1-83eb-aa820dbd92fe')
   * ```
   */
  find(id) {
    return __async(this, null, function* () {
      return this.api.get(`/charges/${id}`);
    });
  }
  /**
   * List the charges
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/charges/list-charges
   *
   * @param params - Filter params
   * @returns Charge API response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * const charges = await malga.charges.list({
   *   page: 1,
   *   limit: 15,
   *   sort: 'DESC'
   *   startDate: '2023-12-26T03:00:00.000Z',
   *   endDate: '2023-12-27T03:00:00.000Z',
   *   merchantId: '8fdff2ab-2bc4-436c-b9c4-8354bf20a62f',
   *   amount: 100,
   *   status: ['authorized'],
   *   paymentMethod: ['credit'],
   *   provider: ['PAGARME'],
   *   orderId: '41ee1393-05a8-46cb-9746-20d7ac58aa5f',
   *   hasSplit: false,
   *   sessionId: '6d0d866a-d28a-4f3d-8690-9d7ca89ebddb'
   * })
   * ```
   */
  list(params) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      const parsedParams = {
        page: params == null ? void 0 : params.page,
        limit: params == null ? void 0 : params.limit,
        sort: params == null ? void 0 : params.sort,
        originalAmount: params == null ? void 0 : params.amount,
        splitRules: params == null ? void 0 : params.hasSplit,
        paymentType: (_a = params == null ? void 0 : params.paymentMethod) == null ? void 0 : _a.join(),
        providerType: (_b = params == null ? void 0 : params.provider) == null ? void 0 : _b.join(),
        orderId: params == null ? void 0 : params.orderId,
        sessionId: params == null ? void 0 : params.sessionId,
        status: (_c = params == null ? void 0 : params.status) == null ? void 0 : _c.join(),
        merchantId: params == null ? void 0 : params.merchantId,
        "created.gt": params == null ? void 0 : params.startDate,
        "created.lt": params == null ? void 0 : params.endDate
      };
      return this.api.paginate("/charges", parsedParams);
    });
  }
  /**
   * Capture pre-authorized charge
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/charges/capture-charge
   *
   * @param id - Charge ID
   * @param payload - object with `amount` value
   * @param options - API options like `idempotencyKey`
   * @returns Charge API Response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * await malga.charges.capture('575f9a3c-6e40-4077-852e-c6781dc3c7c7', {
   *   amount: 100
   * })
   * ```
   */
  capture(id, payload, options) {
    return __async(this, null, function* () {
      return this.api.post(
        `/charges/${id}/capture`,
        payload,
        options == null ? void 0 : options.idempotencyKey
      );
    });
  }
  /**
   * Refund authorized charge
   *
   * @link https://docs.malga.io/docs/api-sdks/docs/charges/refund-charge
   *
   * @param id - Charge ID
   * @param payload - object with `amount` value
   * @param options - API options like `idempotencyKey`
   * @returns Charge API Response
   *
   * @example
   * ```
   * import { Malga } from 'malga'
   *
   * const malga = new Malga({
   *   apiKey: 'API_KEY',
   *   clientId: 'CLIENT_ID',
   * })
   *
   * await malga.charges.refund('575f9a3c-6e40-4077-852e-c6781dc3c7c7', {
   *   amount: 100
   * })
   * ```
   */
  refund(id, payload, options) {
    return __async(this, null, function* () {
      return this.api.post(
        `/charges/${id}/void`,
        payload,
        options == null ? void 0 : options.idempotencyKey
      );
    });
  }
};

// src/common/api/api.ts
import axios from "axios";
import axiosRetry from "axios-retry";
var _Api = class _Api {
  constructor(configurations) {
    this.configurations = configurations;
    var _a, _b, _c;
    this.api = axios.create({
      baseURL: this.getBaseUrl(),
      headers: {
        "Content-Type": "application/json",
        "X-Api-Key": this.configurations.apiKey,
        "X-Client-Id": this.configurations.clientId
      }
    });
    axiosRetry(this.api, {
      retries: (_c = (_b = (_a = this.configurations.options) == null ? void 0 : _a.http) == null ? void 0 : _b.retries) != null ? _c : 3,
      retryDelay: this.handleRetryDelay,
      retryCondition: this.handleRetryCondition
    });
  }
  getBaseUrl() {
    var _a;
    if (process.env.MALGA_API_URL)
      return process.env.MALGA_API_URL;
    if ((_a = this.configurations.options) == null ? void 0 : _a.sandbox) {
      return "https://sandbox-api.malga.io/v1";
    }
    return "https://api.malga.io/v1";
  }
  handleRetryDelay() {
    var _a, _b, _c;
    return (_c = (_b = (_a = this.configurations.options) == null ? void 0 : _a.http) == null ? void 0 : _b.retryDelay) != null ? _c : _Api.TEN_SECONDS_RETRY_DELAY;
  }
  handleRetryCondition(error) {
    const isPostMethod = error.request.method === "POST";
    const isUsingIdempotencyKey = error.request.getHeader("X-Idempotency-Key");
    if (axiosRetry.isNetworkOrIdempotentRequestError(error) || isUsingIdempotencyKey && isPostMethod) {
      return true;
    }
    return false;
  }
  handlePaginateParams(params) {
    if (!params)
      return "";
    const parsedParams = Object.entries(params);
    const transformParams = parsedParams.reduce((acc, [key, value]) => {
      if (!value)
        return acc;
      const currentParam = `${key}=${value}`;
      return !acc ? currentParam : `${acc}&${currentParam}`;
    }, "");
    return `?${transformParams}`;
  }
  handleSuccess(response) {
    return response.data;
  }
  handleError(error) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!((_a = error.response) == null ? void 0 : _a.data) || error.response.status >= 500) {
      return Promise.reject({
        error: {
          type: "api_error",
          code: 500,
          message: "unexpected error"
        }
      });
    }
    if (error.response.status === 403) {
      return Promise.reject({
        error: {
          type: "invalid_request_error",
          code: 403,
          message: "forbidden"
        }
      });
    }
    if (((_c = (_b = error.response.data) == null ? void 0 : _b.error) == null ? void 0 : _c.type) === "card_declined") {
      return Promise.reject({
        error: {
          type: (_d = error.response.data) == null ? void 0 : _d.error.type,
          code: (_e = error.response.data) == null ? void 0 : _e.error.code,
          message: (_f = error.response.data) == null ? void 0 : _f.error.message,
          declinedCode: (_g = error.response.data) == null ? void 0 : _g.error.declined_code
        }
      });
    }
    return Promise.reject(error.response.data);
  }
  get(path) {
    return __async(this, null, function* () {
      return this.api.get(path).then(this.handleSuccess).catch(this.handleError);
    });
  }
  post(path, payload, idempotencyKey, publicKey) {
    return __async(this, null, function* () {
      const headers = {};
      if (idempotencyKey) {
        headers["X-Idempotency-Key"] = idempotencyKey;
      }
      if (publicKey) {
        headers["X-Api-Key"] = publicKey;
      }
      return this.api.post(path, payload, { headers }).then(this.handleSuccess).catch(this.handleError);
    });
  }
  delete(path, payload) {
    return __async(this, null, function* () {
      return this.api.delete(path, { data: payload }).then(this.handleSuccess).catch(this.handleError);
    });
  }
  patch(path, payload) {
    return __async(this, null, function* () {
      return this.api.patch(path, payload).then(this.handleSuccess).catch(this.handleError);
    });
  }
  put(path, payload) {
    return __async(this, null, function* () {
      return this.api.put(path, payload).then(this.handleSuccess).catch(this.handleError);
    });
  }
  paginate(path, params) {
    return __async(this, null, function* () {
      const paginateParams = this.handlePaginateParams(params);
      return this.api.get(`${path}${paginateParams}`).then(this.handleSuccess).catch(this.handleError);
    });
  }
};
_Api.TEN_SECONDS_RETRY_DELAY = 10 * 1e3;
var Api = _Api;

// src/malga.ts
var Malga = class {
  constructor(configurations) {
    var _a;
    if (!configurations.apiKey || !configurations.clientId) {
      throw new Error(
        'Missing API key. Pass it to the constructor `new Malga({ apiKey: "YOUR_API_KEY", clientId: "YOUR_CLIENT_ID" })`'
      );
    }
    const api = new Api(configurations);
    this.auth = new Auth(api);
    this.cards = new Cards(api);
    this.customers = new Customers(api);
    this.sandbox = new Sandbox(api, !!((_a = configurations.options) == null ? void 0 : _a.sandbox));
    this.sellers = new Sellers(api);
    this.sessions = new Sessions(api);
    this.webhooks = new Webhooks();
    this.charges = new Charges(api, this.cards, this.customers);
  }
};

// src/auth/interfaces/create-public-key.ts
var AuthScope = /* @__PURE__ */ ((AuthScope2) => {
  AuthScope2["Customers"] = "customers";
  AuthScope2["Cards"] = "cards";
  AuthScope2["Tokens"] = "tokens";
  AuthScope2["Charges"] = "charges";
  AuthScope2["Webhooks"] = "webhooks";
  AuthScope2["Sessions"] = "sessions";
  AuthScope2["Auth"] = "auth";
  AuthScope2["Reports"] = "reports";
  AuthScope2["Flows"] = "flows";
  AuthScope2["Sellers"] = "sellers";
  return AuthScope2;
})(AuthScope || {});

// src/charges/interfaces/charges.ts
var ChargeStatus = /* @__PURE__ */ ((ChargeStatus2) => {
  ChargeStatus2["Pending"] = "pending";
  ChargeStatus2["PreAuthorized"] = "pre_authorized";
  ChargeStatus2["Authorized"] = "authorized";
  ChargeStatus2["Failed"] = "failed";
  ChargeStatus2["Canceled"] = "canceled";
  ChargeStatus2["Voided"] = "voided";
  ChargeStatus2["ChargedBack"] = "charged_back";
  ChargeStatus2["CapturePending"] = "capture_pending";
  ChargeStatus2["RefundPending"] = "refund_pending";
  ChargeStatus2["Created"] = "created";
  return ChargeStatus2;
})(ChargeStatus || {});

// src/common/interfaces/api.ts
var ApiPaginateSort = /* @__PURE__ */ ((ApiPaginateSort2) => {
  ApiPaginateSort2["ASC"] = "ASC";
  ApiPaginateSort2["DESC"] = "DESC";
  return ApiPaginateSort2;
})(ApiPaginateSort || {});
export {
  ApiPaginateSort,
  AuthScope,
  ChargeStatus,
  Malga
};
